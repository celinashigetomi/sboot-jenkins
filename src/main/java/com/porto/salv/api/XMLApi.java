/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.50).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.porto.salv.api;

import com.porto.salv.model.XMLType;
import com.porto.salv.model.response.BadRequestType;
import com.porto.salv.model.response.InternalErrorType;
import com.porto.salv.model.response.NotFoundType;
import com.porto.salv.model.response.ResponseType;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@Validated
public interface XMLApi {

    @Operation(summary = "Cadastrar xml", tags = {"XML"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseType.class))),
            @ApiResponse(responseCode = "400", description = "Request Inválido", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestType.class))),
            @ApiResponse(responseCode = "500", description = "Erro interno do servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InternalErrorType.class)))})
    @PostMapping(value = "/xml", produces = {"application/json"}, consumes = {"application/json"})
    ResponseEntity<ResponseType> cadastrarXML(
            @Parameter(in = ParameterIn.DEFAULT, required = true, schema = @Schema()) @Valid @RequestBody XMLType body) throws Exception;

    @Operation(summary = "Alterar xml", tags = {"XML"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseType.class))),
            @ApiResponse(responseCode = "400", description = "Request Inválido", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestType.class))),
            @ApiResponse(responseCode = "404", description = "Registro não encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundType.class))),
            @ApiResponse(responseCode = "500", description = "Erro interno do servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InternalErrorType.class)))})
    @PutMapping(value = "/xml", produces = {"application/json"}, consumes = {"application/json"})
    ResponseEntity<ResponseType> alterarXML(
            @Parameter(in = ParameterIn.DEFAULT, required = true, schema = @Schema()) @Valid @RequestBody XMLType body) throws Exception;

    @Operation(summary = "Consultar xml", tags = {"XML"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = XMLType.class)))),
            @ApiResponse(responseCode = "400", description = "Request Inválido", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestType.class))),
            @ApiResponse(responseCode = "404", description = "Registro não encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundType.class))),
            @ApiResponse(responseCode = "500", description = "Erro interno do servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InternalErrorType.class)))})
    @GetMapping(value = "/xml", produces = {"application/json"})
    ResponseEntity<List<XMLType>> consultarXML() throws Exception;

    @Operation(summary = "Deletar xml", tags = {"XML"})
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Sucesso", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ResponseType.class))),
            @ApiResponse(responseCode = "400", description = "Request Inválido", content = @Content(mediaType = "application/json", schema = @Schema(implementation = BadRequestType.class))),
            @ApiResponse(responseCode = "404", description = "Registro não encontrado", content = @Content(mediaType = "application/json", schema = @Schema(implementation = NotFoundType.class))),
            @ApiResponse(responseCode = "500", description = "Erro interno do servidor", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InternalErrorType.class)))})
    @DeleteMapping(value = "/xml/{id}", produces = {"application/json"})
    ResponseEntity<ResponseType> deletarXML(
            @Parameter(in = ParameterIn.PATH, required = true, description = "Código identificador do xml") @PathVariable("id") Integer id) throws Exception;
}